#!/usr/bin/env perl
# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright (C) 2021 Eric Herman <eric@freesa.org>
# Copyright (C) 2021 Keith Reynolds <keithr@pwcrypt.keithr.com>
use strict;
use warnings;

use Fcntl qw( :flock );
use File::Basename qw( dirname );
use File::Copy;
use File::Temp qw( tempfile );

# No commandline arguments if called as a script
#
# The "exit(main()) unless caller();" pattern allows a perl file to be
# loaded like a module using "do" OR run as regular script from the
# command-line.
# see "perldoc -f caller"
# see "perldoc -f do"
#
# Since the "mailpw()" function arguments are useful for testing, but
# they allow the caller to change the behaivor of the program, we never
# pass @ARGV in "real life" instead we allow for test scripts to load
# this file via "do" and call the mailpw() function and call it with
# arguments.
exit( mailpw() ) unless caller();

# The first argument in the path to the config file used to find
# the files to be modified.
# If additional arguments are passed, these will be used as the
# command to generate the passphrase hash. Otherwise, the default
# behavior is to call "pwcrypt".
sub mailpw {

    my $mailpw_conf_path = shift;

    my $user = who_am_i();

    change_instance_passwds( *STDOUT, $user, $mailpw_conf_path, @_ );

    return 0;
}

sub default_config_path {
    return '/etc/mailpw.conf';
}

sub system_who_am_i {
    my $whoami = `/usr/bin/whoami`;
    my $user   = trim($whoami);
    if ( !$user ) {
        warn("`/usr/bin/whoami` == '$whoami'");

        my $who_am_i = `/usr/bin/who am i`;
        ($user) = split( /\s*/, $who_am_i );
        if ( !$user ) {
            warn("who am i? `/usr/bin/who am i` == '$who_am_i'");
        }
    }
    if ( !$user ) {
        warn("\$ENV{USER} == $ENV{USER} (this is not reliable)");
        die("Can not establish user");
    }
    return $user;
}

sub who_am_i {
    my $sudo_user = $ENV{SUDO_USER};
    return $sudo_user if $sudo_user;
    return system_who_am_i();
}

# pass in a an open file handle to the mailpw.conf
sub parse_mailpw_config {
    my ($fh) = @_;

    my $instances = {};
    while ( my $line = <$fh> ) {

        $line = trim_removing_comments($line);

        # skip empty lines
        if ( !length($line) ) {
            next;    # The "next" command is like "continue" in C
        }

        my ( $instance, $type, $path, $user, $group, $mode ) =
          split( /\s/, $line );
        die("bad line: '$line'\n") unless ( $instance && $type && $path );

        $instances->{$instance}->{$path}->{type} = $type;
    }

    return $instances;
}

sub delim_for_type {
    my ($type) = @_;
    return $type eq 'passwd' ? ':' : '\s';
}

sub change_instance_passwds {
    my $out              = shift;
    my $user             = shift;
    my $mailpw_conf_path = shift;

    my $pwcrypt_cmd = scalar(@_) ? join( ' ', @_ ) : 'pwcrypt --type=mail';

    $mailpw_conf_path ||= default_config_path();
    open( my $fh, '<', $mailpw_conf_path )
      or die "Could not open file '$mailpw_conf_path' $! $?";
    my $instances = parse_mailpw_config($fh);
    close($fh);

    my $user_instances = find_instances_for_user( $user, $instances );

    foreach my $instance (@$user_instances) {
        print $out "$user has a password in $instance\n";
    }

    my @instances_to_change;
    if ( scalar(@$user_instances) > 1 ) {

        # TODO: prompt for which ones
        # found in more than 1 instance prompt for instance,
        #   e.g.: "tdf, logicgate, all?"
        push( @instances_to_change, @$user_instances );
    }
    else {
        push( @instances_to_change, @$user_instances );
    }

    my $hash = trim(`$pwcrypt_cmd | tail -n1`);

    my $lock_path = $mailpw_conf_path;
    open( my $fh_lock, '<', $lock_path ) or die "open '$lock_path' failed. $!";
    flock( $fh_lock, LOCK_EX )           or die "flock '$lock_path' failed. $!";

    foreach my $instance (@instances_to_change) {
        foreach my $pwfile ( keys %{ $instances->{$instance} } ) {
            my $type  = $instances->{$instance}->{$pwfile}->{type};
            my $delim = delim_for_type($type);

            my ( $next, $pwfile_next ) = tempfile(
                "mailpw-XXXXXX",
                DIR    => dirname($pwfile),
                UNLINK => 0,
                SUFFIX => ".conf"
            ) or die $!;
            open my $orig, "<", $pwfile
              or die "could not open('<', $pwfile), $!";

            while ( my $line = <$orig> ) {
                print $next replace_hash( $line, $user, $delim, $hash );
            }

            my ( undef, undef, $mode, undef, $uid, $gid ) = stat($orig);

            chown( $uid, $gid, $next )
              or die "could not chown new $pwfile to $uid:$gid $!";
            chmod( $mode, $next )
              or die "could not chmod new $pwfile to $mode $!";

            close($orig);
            close($next);

            unlink("$pwfile.old");
            link( $pwfile, "$pwfile.old" )
              or die "could not link( $pwfile, '$pwfile.old' ), $!";
            move( $pwfile_next, $pwfile )
              or die "could not move( $pwfile_next, $pwfile ), $!";
        }
    }

    close($fh_lock) or die "close lock '$lock_path' failed. $!";
}

# find the instances which have files which contain this user
sub find_instances_for_user {
    my ( $user, $instances ) = @_;
    my $user_instances = {};
    foreach my $instance ( keys %{$instances} ) {
        foreach my $pwfile ( keys %{ $instances->{$instance} } ) {
            my $type  = $instances->{$instance}->{$pwfile}->{type};
            my $delim = delim_for_type($type);
            open( my $pwin, '<', $pwfile ) or die "$pwfile: $!";
            while (<$pwin>) {
                if (/^${user}${delim}/) {
                    push @{ $user_instances->{$instance} }, $pwfile;
                }
            }
            close($pwin);
        }
    }
    return [ keys %$user_instances ];
}

# we don't know the old hash, so replace the
# user, delim, everthing until the next delim with user, delim, new hash
sub replace_hash {
    my ( $data, $user, $delim, $new_hash ) = @_;

    my $replaced = ( $data =~ s/($user$delim+)[^$delim]+/$1$new_hash/r );
    return $replaced;
}

sub trim {
    my ($s) = @_;
    $s =~ s/^\s+|\s+$//g;
    return $s;
}

sub trim_removing_comments {
    my ($s) = @_;
    $s =~ s/^\s+|\s+$|\s*#.*$//g;
    return $s;
}
